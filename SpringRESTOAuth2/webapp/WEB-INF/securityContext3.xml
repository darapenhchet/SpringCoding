<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	    <!-- HTTP Root Access configuration -->
    <sec:http pattern="/api/**" create-session="never" access-decision-manager-ref="accessDecisionManager"
              entry-point-ref="oauthAuthenticationEntryPoint" use-expressions="true" auto-config="true">
        <sec:anonymous enabled="false"/>
        <sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
        <sec:intercept-url pattern="/api/**" access="hasRole('ADMIN')"/>
        <sec:access-denied-handler ref="oauthAccessDeniedHandler"/>
        <sec:expression-handler ref="oauthWebExpressionHandler"/>
    </sec:http>

    <!-- OAuth2 Authentication Entry Point -->
    <bean id="oauthAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="conference"/>
    </bean>

    <bean id="oauthAccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>

    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
                <bean class="org.springframework.security.web.access.expression.WebExpressionVoter">
                    <property name="expressionHandler" ref="oauthWebExpressionHandler"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <oauth2:web-expression-handler id="oauthWebExpressionHandler"/>

    <!-- OAuth2 Token Generation Services -->
    <sec:http pattern="/oauth/token" create-session="stateless"
              authentication-manager-ref="clientAuthenticationManager">
        <sec:intercept-url pattern="/oauth/token" access="permitAll"/>
        <sec:anonymous enabled="false"/>
        <sec:http-basic entry-point-ref="clientAuthenticationEntryPoint"/>
        <sec:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oauthAccessDeniedHandler"/>
    </sec:http>

    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore"/>
        <property name="supportRefreshToken" value="true"/>
        <property name="accessTokenValiditySeconds" value="300000"/>
        <property name="clientDetailsService" ref="clientDetails"/>
    </bean>

    <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore"/>

    <bean id="approvalStore" class="org.springframework.security.oauth2.provider.approval.TokenApprovalStore">
        <property name="tokenStore" ref="tokenStore"/>
    </bean>

    <bean id="userApprovalHandler"
          class="org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandler">
        <property name="approvalStore" ref="approvalStore"/>
        <property name="clientDetailsService" ref="clientDetails"/>
        <property name="requestFactory">
            <bean class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
                <constructor-arg index="0" ref="clientDetails"/>
            </bean>
        </property>
    </bean>

    <!-- OAuth2 Authorization Server -->
    <oauth2:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices"
                                user-approval-handler-ref="userApprovalHandler">
        <oauth2:authorization-code/>
        <oauth2:implicit/>
        <oauth2:refresh-token/>
        <oauth2:client-credentials/>
        <oauth2:password/>
    </oauth2:authorization-server>

    <!-- OAuth2 Protected Resources Server -->
    <oauth2:resource-server 
    	id="resourceServerFilter" 
    	resource-id="conference" 
    	token-services-ref="tokenServices"/> 
    	
    <!-- Protected resources -->
	<!-- <sec:http pattern="/api/**" create-session="never"	entry-point-ref="oauthAuthenticationEntryPoint"	access-decision-manager-ref="accessDecisionManager">
		<sec:anonymous enabled="false" />
		<sec:intercept-url pattern="/api/**" access="hasRole('ADMIN')"/>
		<sec:custom-filter ref="resourceServerFilter"	before="PRE_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http> -->

    <!-- OAuth2 Client Configuration -->
    <bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager"/>
    </bean>

    <bean id="clientAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="conference/client"/>
        <property name="typeName" value="Basic"/>
    </bean>

    <bean id="clientDetailsUserService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails"/>
    </bean>

    <!-- OAuth2 Client's Authentication Manager -->
    <sec:authentication-manager id="clientAuthenticationManager">
        <sec:authentication-provider user-service-ref="clientDetailsUserService"/>
    </sec:authentication-manager>

    <!-- File based client details access -->
    <oauth2:client-details-service id="clientDetails">
        <!-- Web Application clients -->
        <oauth2:client client-id="client"
                      secret="secret"
                      authorities="ROLE_ADMIN"
                      authorized-grant-types="authorization_code"
                      resource-ids="conference"
                      scope="read,write,trust"/>
        <oauth2:client client-id="client2"
                      secret="secret"
                      authorities="ROLE_ADMIN"
                      authorized-grant-types="password, authorization_code, refresh_token, implicit, redirect"
                      resource-ids="conference"
                      scope="read,write,trust"/>
        <oauth2:client client-id="client3"
                      secret="secret"
                      authorities="ROLE_ADMIN"
                      authorized-grant-types="client_credentials"
                      resource-ids="conference"
                      scope="read,write,trust"/>
        <oauth2:client client-id="client4"
                      secret="secret"
                      authorities="ROLE_ADMIN"
                      authorized-grant-types="implicit"
                      resource-ids="conference"
                      scope="read,write,trust"/>
    </oauth2:client-details-service>

    <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
        <sec:expression-handler ref="oauthExpressionHandler"/>
    </sec:global-method-security>

    <oauth2:expression-handler id="oauthExpressionHandler"/>
    
    <!-- Global HTTP security -->
    <sec:http auto-config="true" pattern="/**" use-expressions="true"
              authentication-manager-ref="userAuthenticationManager">
        <sec:intercept-url pattern="/**" access="isAuthenticated()"/>
        <sec:csrf disabled="true"/>
    </sec:http>

    <!-- Spring Security Authentication Manager -->
    <sec:authentication-manager alias="userAuthenticationManager">
        <sec:authentication-provider>
            <sec:user-service id="userDetailsManager">
                <sec:user name="admin" password="admin" authorities="USER, ADMIN, APP"/>
                <sec:user name="user" password="user" authorities="USER"/>
            </sec:user-service>
        </sec:authentication-provider>
    </sec:authentication-manager>

</beans>
